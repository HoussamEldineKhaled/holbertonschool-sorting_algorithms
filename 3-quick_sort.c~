#include "sort.h"



void swap(int *a, int *b)
{
  int temp = *a;
  *a = *b;
  *b = temp;
}




int partition(int *array, int low, int high, size_t size)
{
  int pivot = array[high];
  int i = low - 1, j = low;

  while (j < high)
    {
      if (array[j] < pivot)
	{
	  i++;
	  if (i != j)
	    {
	      swap(&array[i], &array[j]);
	      print_array(array, size);
	    }
	}
    }
  if (array[i + 1] != array[high])
    {
      swap(&array[i + 1], &array[high]);
      print_array(array, size);
    }
  return (i + 1);
}



void quick_sort(int *array, size_t size)
{
  int pivot_index = 0;
  if (low < high)
    {
      pivot_index = partition(array, low, high, size);
      quick_sort_recursive(array, low, pivot_index - 1, size);
      quick_sort_recursive(array, pivot_index + 1, high, size);
    }
}



void quick_sort(int *array, size_t size)
{
  if (array == NULL || size < 2)
    {
      return;
    }
  quick_sort_recursive(array, 0,size - 1, size);
}
